Commits in this patch:
----------------------

  2cba2b5294277be36179d50caa3a8af2716ff470
  x86/speculation: Restore speculation related MSRs during S3 resume



x86/speculation: Restore speculation related MSRs during S3 resume

jira: ROC-3197
cve: CVE-2023-1637
commit: e2a1256b17b16f9b9adf1b6fea56819e7b68e463
upstream-diff: cherry-pick pulled in additional functions “pm_cpu_check, msr_save_cpuid_features“ and a struct. Removed those to only add pm_save_spec_msr and line in pm_check_save_msr. The patch also adds msr_build_context which our kernel does not have which replaces msr_init_context previously in another commit. Using msr_init_context instead which is safer as it will check if the array has already been allocated and is a NO-OP returning -EINVAL if it is called a second time. The other function build_context increases the size of the array every time it is called which could lead to a memory leak or rapidly growing arrays so using init_context instead with a fixed array size should be safer.

After resuming from suspend-to-RAM, the MSRs that control CPU's
speculative execution behavior are not being restored on the boot CPU.

These MSRs are used to mitigate speculative execution vulnerabilities.
Not restoring them correctly may leave the CPU vulnerable.  Secondary
CPU's MSRs are correctly being restored at S3 resume by
identify_secondary_cpu().

During S3 resume, restore these MSRs for boot CPU when restoring its
processor state.

    Fixes: 772439717dbf ("x86/bugs/intel: Set proper CPU features and setup RDS")
    Reported-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Tested-by: Neelima Krishnan <neelima.krishnan@intel.com>
    Acked-by: Borislav Petkov <bp@suse.de>
    Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    (cherry picked from commit e2a1256b17b16f9b9adf1b6fea56819e7b68e463)

Signed-off-by: David Gomez <dgomez@ciq.com>
diff --git a/arch/x86/power/cpu.c b/arch/x86/power/cpu.c
index f48756c903d4..cd9a25fa5c85 100644
--- a/arch/x86/power/cpu.c
+++ b/arch/x86/power/cpu.c
@@ -446,9 +446,24 @@ static const struct dmi_system_id msr_save_dmi_table[] = {
 	{}
 };
 
+static void pm_save_spec_msr(void)
+{
+	u32 spec_msr_id[] = {
+		MSR_IA32_SPEC_CTRL,
+		MSR_IA32_TSX_CTRL,
+		MSR_TSX_FORCE_ABORT,
+		MSR_IA32_MCU_OPT_CTRL,
+		MSR_AMD64_LS_CFG,
+	};
+
+	msr_init_context(spec_msr_id, ARRAY_SIZE(spec_msr_id));
+}
+
 static int pm_check_save_msr(void)
 {
 	dmi_check_system(msr_save_dmi_table);
+	pm_save_spec_msr();
+
 	return 0;
 }
 
-- 
2.39.3

