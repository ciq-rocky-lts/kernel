Commits in this patch:
----------------------

  3cf23e0d575fc21668f0388b98e797932640c441
  af_key: Do not call xfrm_probe_algs in parallel



af_key: Do not call xfrm_probe_algs in parallel

jira: ROC-3257
cve: CVE-2022-3028
commit: ba953a9d89a00c078b85f4b190bc1dde66fe16b5

When namespace support was added to xfrm/afkey, it caused the
previously single-threaded call to xfrm_probe_algs to become
multi-threaded.  This is buggy and needs to be fixed with a mutex.

    Reported-by: Abhishek Shah <abhishek.shah@columbia.edu>
    Fixes: 283bc9f35bbb ("xfrm: Namespacify xfrm state/policy locks")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com>
    (cherry picked from commit ba953a9d89a00c078b85f4b190bc1dde66fe16b5)

Signed-off-by: David Gomez <dgomez@ciq.com>
diff --git a/net/key/af_key.c b/net/key/af_key.c
index 96d36edaaee5..6c0c7e8f82e8 100644
--- a/net/key/af_key.c
+++ b/net/key/af_key.c
@@ -1717,9 +1717,12 @@ static int pfkey_register(struct sock *sk, struct sk_buff *skb, const struct sad
 		pfk->registered |= (1<<hdr->sadb_msg_satype);
 	}
 
+	mutex_lock(&pfkey_mutex);
 	xfrm_probe_algs();
 
 	supp_skb = compose_sadb_supported(hdr, GFP_KERNEL | __GFP_ZERO);
+	mutex_unlock(&pfkey_mutex);
+
 	if (!supp_skb) {
 		if (hdr->sadb_msg_satype != SADB_SATYPE_UNSPEC)
 			pfk->registered &= ~(1<<hdr->sadb_msg_satype);
-- 
2.39.3

